// Enum (Enumeration) ‡¶π‡¶≤‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ fixed value ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá group ‡¶ï‡¶∞‡¶æ‡•§
// ‡¶è‡¶ü‡¶æ ‡¶Æ‡ßÇ‡¶≤‡¶§ constant values manage ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§
//Basic Number Enum
var Direction;
(function (Direction) {
    Direction[Direction["Up"] = 1] = "Up";
    Direction[Direction["Down"] = 2] = "Down";
    Direction[Direction["Left"] = 3] = "Left";
    Direction[Direction["Right"] = 4] = "Right";
})(Direction || (Direction = {}));
let move = Direction.Up;
console.log(move); // 1
console.log(Direction.Left); // 3
//‡¶è‡¶ñ‡¶æ‡¶®‡ßá Up = 1 ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ Down = 2, Left = 3, Right = 4 auto assign ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§
//String Enum
var Roles;
(function (Roles) {
    Roles["Admin"] = "ADMIN";
    Roles["User"] = "USER";
    Roles["Guest"] = "GUEST";
})(Roles || (Roles = {}));
function checkRole(role) {
    if (role === Roles.Admin) {
        console.log("Welcome Admin, full access!");
    }
    else if (role === Roles.User) {
        console.log("Welcome User, limited access.");
    }
    else {
        console.log("Guest access only.");
    }
}
checkRole(Roles.Admin); // Welcome Admin, full access!
checkRole(Roles.Guest); // Guest access only.
//Heterogeneous Enum (string + number)
var Mixed;
(function (Mixed) {
    Mixed[Mixed["No"] = 0] = "No";
    Mixed["Yes"] = "YES";
})(Mixed || (Mixed = {}));
console.log(Mixed.No); // 0
console.log(Mixed.Yes); // YES
//Enum ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ Object ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã
var Status;
(function (Status) {
    Status[Status["Pending"] = 0] = "Pending";
    Status[Status["InProgress"] = 1] = "InProgress";
    Status[Status["Completed"] = 2] = "Completed";
})(Status || (Status = {}));
let taskStatus = Status.Pending;
if (taskStatus === Status.Pending) {
    console.log("Task is still pending...");
}
//Reverse Mapping (Number Enum ‡¶è)
var Color;
(function (Color) {
    Color[Color["Red"] = 1] = "Red";
    Color[Color["Green"] = 2] = "Green";
    Color[Color["Blue"] = 3] = "Blue";
})(Color || (Color = {}));
console.log(Color.Red); // 1
console.log(Color[2]); // Green
export {};
// Summary (Enum ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú)
// Fixed constant values define ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü ‚úÖ
// Code readable ‡¶π‡ßü (magic number / string avoid ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü) ‚úÖ
// Number Enum ‚Üí auto increment ‡¶π‡ßü ‚úÖ
// String Enum ‚Üí readable values ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‚úÖ
// Reverse mapping (number enum ‡¶è) ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü ‚úÖ
// üëâ ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ real-life mini project example (‡¶Ø‡ßá‡¶Æ‡¶®: Task Management system, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá Status enum use ‡¶π‡¶¨‡ßá) ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
// ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì?
//# sourceMappingURL=Enum.js.map