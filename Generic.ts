//Generic ‡¶Æ‡¶æ‡¶®‡ßá Flexible Type‡•§
// Generic ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá, ‡¶§‡ßÅ‡¶Æ‡¶ø code ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® data type ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø reuse ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§

//Without Generics (Problem)
function identityNumber(value: number): number {
  return value;
}

function identityString(value: string): string {
  return value;
}

console.log(identityNumber(100));
console.log(identityString("Sajib"));

//With Generics (Solution ‚úÖ)
function identity<T>(value: T): T {
  return value;
}

let num = identity<number>(100);
let str = identity<string>("Hello Sajib");

console.log(num); // 100
console.log(str); // Hello Sajib
//‡¶è‡¶ñ‡¶æ‡¶®‡ßá <T> ‡¶π‡¶≤‡ßã Generic Type Variable‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá number/string/object ‡¶∏‡¶¨ pass ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§
//Generic with Arrays
function getFirstElement<T>(arr: T[]): T {
  return arr[0];
}

let numbers = getFirstElement<number>([10, 20, 30]);
let names = getFirstElement<string>(["Sajib", "Ria", "Rony"]);

console.log(numbers); // 10
console.log(names); // Sajib
//Generic Interface
interface ApiResponse<T> {
  status: number;
  data: T;
}

const userResponse: ApiResponse<{ id: number; name: string }> = {
  status: 200,
  data: { id: 1, name: "Sajib" },
};

const stringResponse: ApiResponse<string> = {
  status: 200,
  data: "Success",
};
//Generic Class
class Box<T> {
  private content: T;

  constructor(value: T) {
    this.content = value;
  }

  getContent(): T {
    return this.content;
  }
}

const numberBox = new Box<number>(123);
const stringBox = new Box<string>("Hello Sajib");

console.log(numberBox.getContent()); // 123
console.log(stringBox.getContent()); // Hello Sajib
// Generic Constraint (extends ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ)
// üëâ ‡¶ï‡¶ñ‡¶®‡¶ì ‡¶ö‡¶æ‡¶á ‡¶Ø‡ßá generic type ‡¶è ‡¶ï‡¶ø‡¶õ‡ßÅ property ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
interface HasLength {
  length: number;
}

function logLength<T extends HasLength>(item: T): void {
  console.log(item.length);
}

logLength("Hello"); // ‚úÖ string ‡¶è length ‡¶Ü‡¶õ‡ßá
logLength([1, 2, 3]); // ‚úÖ array ‡¶§‡ßá‡¶ì length ‡¶Ü‡¶õ‡ßá
// logLength(123); ‚ùå Error (number ‡¶è length ‡¶®‡¶æ‡¶á)

// Summary (Generic ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßÄ ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü?)

// Function reusable ‡¶ï‡¶∞‡¶æ ‚úÖ

// Array, Object, Class ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø flexible type ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‚úÖ

// Interface flexible ‡¶ï‡¶∞‡¶æ ‚úÖ

// Constraint ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‚úÖ
